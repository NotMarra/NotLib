name: Advanced Build and Release

on:
  release:
    types: [published, edited]
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag to upload to"
        required: true
        type: string

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Validate Maven configuration
        run: |
          if [ ! -f "pom.xml" ]; then
            echo "❌ pom.xml not founded!"
            exit 1
          fi
          echo "✅ pom.xml founded"

      - name: Build with Maven (with tests)
        run: |
          echo "🔨 Building project..."
          mvn clean compile test package

      - name: Generate sources and javadoc
        run: |
          echo "📚 Generating sources and javadoc..."
          mvn source:jar javadoc:jar || echo "⚠️ Sources/Javadoc generation failed, continuing..."

      - name: Get project information
        id: project_info
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          NAME=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          GROUP=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "group=$GROUP" >> $GITHUB_OUTPUT

          echo "📋 Project Info:"
          echo "  Group: $GROUP"
          echo "  Name: $NAME" 
          echo "  Version: $VERSION"

      - name: Find and prepare artifacts
        id: artifacts
        run: |
          echo "🔍 Searching for build artifacts..."

          # Hlavní JAR
          MAIN_JAR=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" -not -name "*-tests.jar" | head -1)
          # Sources JAR
          SOURCES_JAR=$(find target -name "*-sources.jar" | head -1)
          # Javadoc JAR  
          JAVADOC_JAR=$(find target -name "*-javadoc.jar" | head -1)

          if [ -z "$MAIN_JAR" ]; then
            echo "❌ Main JAR file not founded!"
            exit 1
          fi

          echo "main_jar=$MAIN_JAR" >> $GITHUB_OUTPUT
          echo "sources_jar=${SOURCES_JAR:-}" >> $GITHUB_OUTPUT
          echo "javadoc_jar=${JAVADOC_JAR:-}" >> $GITHUB_OUTPUT

          echo "✅ Artifacts founded:"
          echo "  Main JAR: $MAIN_JAR"
          [ -n "$SOURCES_JAR" ] && echo "  Sources: $SOURCES_JAR"
          [ -n "$JAVADOC_JAR" ] && echo "  Javadoc: $JAVADOC_JAR"

      - name: Get release info
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "upload_url=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ inputs.release_tag }} | jq -r .upload_url)" >> $GITHUB_OUTPUT
          else
            echo "upload_url=${{ github.event.release.upload_url }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Main JAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ${{ steps.artifacts.outputs.main_jar }}
          asset_name: ${{ steps.project_info.outputs.name }}-${{ steps.project_info.outputs.version }}.jar
          asset_content_type: application/java-archive

      - name: Upload Sources JAR
        if: steps.artifacts.outputs.sources_jar != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ${{ steps.artifacts.outputs.sources_jar }}
          asset_name: ${{ steps.project_info.outputs.name }}-${{ steps.project_info.outputs.version }}-sources.jar
          asset_content_type: application/java-archive

      - name: Upload Javadoc JAR
        if: steps.artifacts.outputs.javadoc_jar != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: ${{ steps.artifacts.outputs.javadoc_jar }}
          asset_name: ${{ steps.project_info.outputs.name }}-${{ steps.project_info.outputs.version }}-javadoc.jar
          asset_content_type: application/java-archive

      - name: Create detailed build report
        run: |
          echo "# 📦 Build Report for ${{ steps.project_info.outputs.name }} v${{ steps.project_info.outputs.version }}" > build_report.md
          echo "" >> build_report.md
          echo "## 📋 Project Information" >> build_report.md
          echo "- **Group ID:** \`${{ steps.project_info.outputs.group }}\`" >> build_report.md
          echo "- **Artifact ID:** \`${{ steps.project_info.outputs.name }}\`" >> build_report.md
          echo "- **Version:** \`${{ steps.project_info.outputs.version }}\`" >> build_report.md
          echo "- **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> build_report.md
          echo "- **Commit:** \`${{ github.sha }}\`" >> build_report.md
          echo "" >> build_report.md
          echo "## 🔧 Build Environment" >> build_report.md
          echo "- **OS:** $(uname -s) $(uname -r)" >> build_report.md
          echo "- **Java:** $(java -version 2>&1 | head -1)" >> build_report.md
          echo "- **Maven:** $(mvn -version | head -1)" >> build_report.md
          echo "" >> build_report.md
          echo "## 📦 Generated Artifacts" >> build_report.md

          # Info o hlavním JARu
          MAIN_SIZE=$(ls -lh ${{ steps.artifacts.outputs.main_jar }} | awk '{print $5}')
          echo "### Main JAR" >> build_report.md
          echo "- **File:** ${{ steps.project_info.outputs.name }}-${{ steps.project_info.outputs.version }}.jar" >> build_report.md
          echo "- **Size:** $MAIN_SIZE" >> build_report.md

          # Info o sources JARu
          if [ -n "${{ steps.artifacts.outputs.sources_jar }}" ]; then
            SOURCES_SIZE=$(ls -lh ${{ steps.artifacts.outputs.sources_jar }} | awk '{print $5}')
            echo "" >> build_report.md
            echo "### Sources JAR" >> build_report.md
            echo "- **File:** ${{ steps.project_info.outputs.name }}-${{ steps.project_info.outputs.version }}-sources.jar" >> build_report.md
            echo "- **Size:** $SOURCES_SIZE" >> build_report.md
          fi

          # Info o javadoc JARu
          if [ -n "${{ steps.artifacts.outputs.javadoc_jar }}" ]; then
            JAVADOC_SIZE=$(ls -lh ${{ steps.artifacts.outputs.javadoc_jar }} | awk '{print $5}')
            echo "" >> build_report.md
            echo "### Javadoc JAR" >> build_report.md
            echo "- **File:** ${{ steps.project_info.outputs.name }}-${{ steps.project_info.outputs.version }}-javadoc.jar" >> build_report.md
            echo "- **Size:** $JAVADOC_SIZE" >> build_report.md
          fi

          echo "" >> build_report.md
          echo "## 🎯 Installation Instructions" >> build_report.md
          echo "### Maven" >> build_report.md
          echo '```xml' >> build_report.md
          echo '<dependency>' >> build_report.md
          echo "    <groupId>${{ steps.project_info.outputs.group }}</groupId>" >> build_report.md
          echo "    <artifactId>${{ steps.project_info.outputs.name }}</artifactId>" >> build_report.md
          echo "    <version>${{ steps.project_info.outputs.version }}</version>" >> build_report.md
          echo '</dependency>' >> build_report.md
          echo '```' >> build_report.md
          echo "" >> build_report.md
          echo "### Direct Download" >> build_report.md
          echo "Download the JAR file from the assets below and add it to your project's classpath." >> build_report.md

      - name: Upload Build Report
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_info.outputs.upload_url }}
          asset_path: build_report.md
          asset_name: build-report.md
          asset_content_type: text/markdown

      - name: Success notification
        run: |
          echo "🎉 Build completed successfully!"
          echo "✅ All artifacts have been uploaded to the release."
